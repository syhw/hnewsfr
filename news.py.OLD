import cgi, os

from google.appengine.api import users
from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app
from google.appengine.ext import db
from google.appengine.ext.webapp import template
from google.appengine.ext.webapp.util import login_required
import urllib2
#from google.appengine.api import memcache
#http://code.google.com/appengine/docs/python/memcache/usingmemcache.html#Memcache

#from google.appengine.api import urlfetch
#from django.utils import simplejson
# (p-1)/(t+2)^1.5     p votes   t in hours

class Entry(db.Model): #, key_name='ident'):
    author = db.UserProperty()
    content = db.StringProperty(multiline=True)
    date = db.DateTimeProperty(auto_now_add=True)
    ups = db.IntegerProperty()

class Post(Entry):
    url = db.StringProperty()
    site = db.StringProperty()
    rank = db.IntegerProperty()

class Comment(Entry):
    post = db.ReferenceProperty(Entry,
            collection_name='comments')

class MainPage(webapp.RequestHandler):
    def get(self):
        posts_query = Post.all().order('-rank')
        posts = posts_query.fetch(20)
        #for post in posts:
        #    print post.to_xml()
        #    k = post.key
        #    print Post.get(k)
        if users.get_current_user():
            url = users.create_logout_url(self.request.uri)
            url_linktext = 'Logout'
        else:
            url = users.create_login_url(self.request.uri)
            url_linktext = 'Login'
        template_values = {
                'posts': posts,
                'url': url,
                'url_linktext': url_linktext,
                'submit': '/submit',
                'submit_linktext': 'Submit',
                'search': '/search',
                'search_linktext': 'Search',
                'user': users.get_current_user()
                }
        path = os.path.join(os.path.dirname(__file__), 'index.html')
        self.response.out.write(template.render(path, template_values))

class Submit(webapp.RequestHandler):
    @login_required # Only work for get()
    def get(self):
        # if users.get_current_user() is None:
        #    self.redirect(users.create_login_url(self.request.uri))
        template_values = {
                }
        path = os.path.join(os.path.dirname(__file__), 'submit.html')
        self.response.out.write(template.render(path, template_values))

    def post(self):
        submit = Post()
        if users.get_current_user():
            submit.author = users.get_current_user()
        else:
            self.redirect(users.create_login_url(self.request.uri))
        submit.url = self.request.get('url')
        # Already submited ? 
        test = Post.all()
        test.filter("url = ", submit.url)
        res = test.fetch(1)
        if res:
            self.redirect('/already_submitted')
            return -1
        # Browsable ?
        try:
            urllib2.urlopen(submit.url)
        except:
            self.redirect('/wrong_submit')
            return -1
        #print type(self.request.get('content'))
        #submit.content = unicode(self.request.get('content'),'utf-8')
        submit.content = self.request.get('content')
        submit.site = submit.url.split('/')[2]
        submit.rank = 0
        submit.put()
        self.redirect('/')
        return 0

class AddComment(webapp.RequestHandler):
    @login_required # Only work for get()
    def get(self):
        #print self.request.url
        #self.request.get('pid')
        #print pid
        #if users.get_current_user() is None:
        #    self.redirect(users.create_login_url(self.request.uri))
        template_values = {
                }
        path = os.path.join(os.path.dirname(__file__), 'add_comment.html')
        self.response.out.write(template.render(path, template_values))
    def post(self):
        submit = Comment()
        if users.get_current_user():
            submit.author = users.get_current_user()
        else:
            self.redirect(users.create_login_url(self.request.uri))
        submit.content = self.request.get('content')
        submit.post = post.key.id
        ##### submit.post = objet_post_ici
        submit.put()
        self.redirect('/')

# Never finish any code or you'll get old ...
# {
class WrongSubmit(webapp.RequestHandler):
    def get(self):
        print "ton URL n'est pas browsable par mon urllib2 !"

class AlreadySubmitted(webapp.RequestHandler):
    def get(self):
        print "ton URL est deja dans la DB !"
# }

class Search(webapp.RequestHandler):
    def get(self):
        if self.request.get('search'):
            search = self.request.get('search').split(' ')
            res = Post.all()
            print search
            #res.filter('content IN', search)
            where = ''
            for word in search[:len(search)-1]:
                if word is not '':
                    where = where + 'WHERE content = ' + word + ' OR WHERE url = ' + word + ' OR '
            word = search[len(search)-1]
            if word is not '':
                where = where + 'WHERE content = ' + word + ' OR WHERE url = ' + word
            print where
            res = db.GqlQuery("SELECT * FROM Post " + where)
            res.order('-rank')
            posts = res.fetch(20)
            #for post in posts:
            #    print post.to_xml()
            if users.get_current_user():
                url = users.create_logout_url(self.request.uri)
                url_linktext = 'Logout'
            else:
                url = users.create_login_url(self.request.uri)
                url_linktext = 'Login'
            template_values = {
                    'posts': posts,
                    'url': url,
                    'url_linktext': url_linktext,
                    'submit': '/submit',
                    'submit_linktext': 'Submit',
                    'search': '/search',
                    'search_linktext': 'Search',
                    'user': users.get_current_user()
                    }
            path = os.path.join(os.path.dirname(__file__), 'index.html')
            self.response.out.write(template.render(path, template_values))
            return
        template_values = {
                }
        path = os.path.join(os.path.dirname(__file__), 'search.html')
        self.response.out.write(template.render(path, template_values))


application = webapp.WSGIApplication(
                                    [('/', MainPage),
                                     ('/submit', Submit),
                                     ('/comment', AddComment),
                                     ('/wrong_submit', WrongSubmit),
                                     ('/already_submitted', AlreadySubmitted),
                                     ('/search', Search)],
                                    debug=True)

def main():
    run_wsgi_app(application)

if __name__ == "__main__":
    main()


